## for NATS service configuration see #scripts/nats-bootstrap/values-nats.yaml.tmpl

image: &image_anchor
  image:
    pullPolicy: Always
    repository:
      tag: latest
      url: localhost:5001

env: &env_anchor
  env:
    facility: sandbox
    log_level: debug
    endpoints:
      nats:
        url: nats://nats:4222
        timeout: 60s
      otel:
        authenticate: false
        url: jaeger:4317
      fleetdb:
        authenticate: false
        url: http://fleetdb:8000
        oidc_audience_url: # to be filled once oauth is available in the sandbox
        oidc_issuer_url:   # to be filled once oauth is available in the sandbox
        oidc_client_id: # to be filled by each service below (exampe: conditionorc.env.endpoints.fleetdb.client_id and conditionorc.env.endpoints.fleetdb.client_scopes)
        oidc_scopes:    # to be filled by each service below (exampe: conditionorc.env.endpoints.fleetdb.client_id and conditionorc.env.endpoints.fleetdb.client_scopes)
      conditionorc:
        authenticate: false
        url: http://conditionorc-api:9001
        oidc_audience_url: # to be filled once oauth is available in the sandbox
        oidc_issuer_url:   # to be filled once oauth is available in the sandbox
        oidc_client_id: # to be filled by each service below (exampe: conditionorc.env.endpoints.fleetdb.client_id and conditionorc.env.endpoints.fleetdb.client_scopes)
        oidc_scopes:    # to be filled by each service below (exampe: conditionorc.env.endpoints.fleetdb.client_id and conditionorc.env.endpoints.fleetdb.client_scopes)
      component_inventory:
        authenticate: false
        url: http://component-inventory:8020

fleetdb:
  enable_oidc: false
  <<: *image_anchor
  <<: *env_anchor
  nats:
    publishStreamPrefix: com.hollow.sh.fleetdb.events

conditionorc:
  enable_server_enroll: true
  <<: *image_anchor
  <<: *env_anchor
    # uncomment once oauth service is availble in sandbox
    # env:
    #   endpoints:
    #     fleetdb:
    #       client_id: conditionorc-api
    #       client_scopes: "read:server create:server:attributes update:server:attributes delete:server:attributes"

flasher:
  <<: *image_anchor
  <<: *env_anchor
    # uncomment once oauth service is availble in sandbox
    # env:
    #   endpoints:
    #     fleetdb:
    #       client_id: flasher
    #       client_scopes: "read:server read:server:credentials read:server:component read:server:versioned-attributes read:server-component-firmwares read:server-component-firmware-sets"

alloy:
  <<: *image_anchor
  <<: *env_anchor

syncer:
  enable_cronjob: false
  enable_job: false
  enable_env: false
  schedule: '"00 08 * * *"'
  <<: *image_anchor
  <<: *env_anchor
  endpoints:
    s3: &s3_endpoint_anchor
      region: us-east-1
      url: us-east-1
      bucket: bucket1
      access_key: accessKey
      secret_key: secretKet
    asrr:
      <<: *s3_endpoint_anchor
    github:
      openbmc_token: redacted
    artifacts:
      url: http://minio:9000
    firmware_manifest:
      url: http://modeldata/modeldata.json

fleet_scheduler:
  enable: false # when enabled, metal-toolbox/fleet-scheduler will need to be deployed with `make push-image-devel`
  <<: *image_anchor
  <<: *env_anchor
    # uncomment once oauth service is availble in sandbox
    # env:
    #   endpoints:
    #     fleetdb:
    #       client_id: fleetscheduler
    #       client_scopes: "read:server"
    #   endpoints:
    #     conditionorc:
    #       client_id: fleetscheduler
    #       client_scopes: "read:condition create:condition"
  jobs: # technically, this is optional
    - name: inventory # This job will collect all servers and create conditions on them within the facility
      ttlSecondsAfterFinished: 86400 # Remove job after 1 day. (optional)
      restartPolicy: Never
      schedule: # Run every monday, starting at 12pm UTC, and randomly running over the next 6 hours
        minute: "0"
        hour: "12"
        month: "*" # run every month
        day_of_week: "1"
        enable_random_minute: true # run randomly between all minutes between the range schedule.minute and (schedule.minute + schedule.random_minute_span)
        random_minute_span: "57" # run anytime 59 minutes after the start minutes
        enable_random_hour: true # run randomly between all hours between the range schedule.hour and (schedule.hour + schedule.random_hour_span)
        random_hour_span: "6" # run anytime 6 hours after the start hour
        enable_random_day_of_week: true # run randomly throughout the work week (monday through friday)
        random_day_of_week_span: "5"
      command:
      - /usr/sbin/fleet-scheduler
      - --config
      - /etc/fleet-scheduler/config.yaml
      - inventory
      - --page-size # how many servers to get per request to fleetdb
      - "100"

flipflop:
  enable: true
  <<: *image_anchor
  <<: *env_anchor

minio:
  fullnameOverride: minio
  environment:
    MINIO_DOMAIN: minio
  resources:
    requests:
      memory: 512Mi
  replicas: 1
  persistence:
    enabled: false
  mode: standalone
  rootUser: rootuser
  rootPassword: rootpass123
  buckets:
    - name: bucket1
      policy: none
      purge: false
  svcaccts:
    - user: rootuser
      accessKey: accessKey
      secretKey: secretKey

crdb:
  image: cockroachdb/cockroach:latest-v21.1

chaos-mesh:
  enabled: false

#https://github.com/chaos-mesh/chaos-mesh/tree/master/helm/chaos-mesh
controllerManager:
  leaderElection:
    enabled: false
dashboard:
  securityMode: false
chaosDaemon:
  runtime: containerd
  socketPath: /run/containerd/containerd.sock

# Enable the push gateway to collect metrics from fleetscheduler
prometheus-pushgateway:
  enable: true
  fullnameOverride: fleet-pushgateway
  resources:
   limits:
     cpu: 300m
     memory: 150Mi
   requests:
     cpu: 300m
     memory: 150Mi
  service:
   port: 9090
