## for NATS service configuration see #scripts/nats-bootstrap/values-nats.yaml.tmpl

location: sandbox

fleetdb:
  enable_oidc: false
  image:
    repository: "localhost:5001/fleetdb"
    tag: latest
    pullPolicy: Always
  nats:
    publishStreamPrefix: com.hollow.sh.fleetdb.events

conditionorc:
  env:
    enable_server_enroll: true
    NATS_URL: "nats://nats:4222"
    NATS_CONNECT_TIMEOUT: 60s
    SERVERSERVICE_ENDPOINT: http://fleetdb:8000
    FLEETDB_ENDPOINT: http://fleetdb:8000
    SERVERSERVICE_DISABLE_OAUTH: true
    # uncomment once oauth service is available in sandbox
    #SERVERSERVICE_OIDC_AUDIENCE_ENDPOINT:
    ## trailing forward slash is required.
    #SERVERSERVICE_OIDC_ISSUER_ENDPOINT:
    #SERVERSERVICE_OIDC_CLIENT_ID: conditionorc-api
    #SERVERSERVICE_OIDC_CLIENT_SCOPES: "read:server create:server:attributes update:server:attributes delete:server:attributes"
    ## telemetry configuration
    OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4317
    OTEL_EXPORTER_OTLP_INSECURE: true
  image:
    repository: "localhost:5001/conditionorc"
    tag: latest
    pullPolicy: Always

flasher:
  env:
    NATS_URL: "nats://nats:4222"
    NATS_CONNECT_TIMEOUT: 60s
    SERVERSERVICE_ENDPOINT: http://fleetdb:8000
    FLEETDB_ENDPOINT: http://fleetdb:8000
    SERVERSERVICE_DISABLE_OAUTH: true
    # to uncomment once oauth service is availble in sandbox
    # SERVERSERVICE_OIDC_AUDIENCE_ENDPOINT:
    # SERVERSERVICE_OIDC_ISSUER_ENDPOINT:
    # SERVERSERVICE_OIDC_CLIENT_ID: flasher
    # SERVERSERVICE_OIDC_CLIENT_SCOPES: "read:server read:server:credentials read:server:component read:server:versioned-attributes read:server-component-firmwares read:server-component-firmware-sets"
    # # telemetry configuration
    OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4317
    OTEL_EXPORTER_OTLP_INSECURE: true
  image:
    repository: "localhost:5001/flasher"
    tag: latest
    pullPolicy: Always

alloy:
  image:
    repository: "localhost:5001/alloy"
    tag: latest
    pullPolicy: Always
  env:
    ALLOY_SERVERSERVICE_ENDPOINT: http://fleetdb:8000
    ALLOY_FLEETDB_ENDPOINT: http://fleetdb:8000
    ALLOY_SERVERSERVICE_DISABLE_OAUTH: true
    ALLOY_NATS_URL: "nats://nats:4222"
    # telemetry configuration
    OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4317
    OTEL_EXPORTER_OTLP_INSECURE: true

syncer:
  enable_cronjob: false
  enable_job: false
  enable_env: false
  schedule: '"00 08 * * *"'
  image:
    repository: "localhost:5001/firmware-syncer"
    tag: latest
    pullPolicy: Always
  env:
    SYNCER_SERVERSERVICE_ENDPOINT: http://fleetdb:8000
    SYNCER_FLEETDB_ENDPOINT: http://fleetdb:8000
    SYNCER_SERVERSERVICE_DISABLE_OAUTH: true
    SYNCER_S3_REGION: "us-east-1"
    SYNCER_S3_ENDPOINT: http://minio:9000
    SYNCER_S3_BUCKET: bucket1
    SYNCER_S3_ACCESS_KEY: accessKey
    SYNCER_S3_SECRET_KEY: secretKey
    SYNCER_ASRR_S3_REGION: "us-east-1"
    SYNCER_ASRR_S3_ENDPOINT: http://minio:9000
    SYNCER_ASRR_S3_BUCKET: bucket1
    SYNCER_ASRR_S3_ACCESS_KEY: accessKey
    SYNCER_ASRR_S3_SECRET_KEY: secretKey
    SYNCER_GITHUB_OPENBMC_TOKEN: redacted
  configmap:
    artifacts_url: http://minio:9000
    firmware_manifest_url: http://modeldata/modeldata.json

minio:
  fullnameOverride: minio
  environment:
    MINIO_DOMAIN: minio
  resources:
    requests:
      memory: 512Mi
  replicas: 1
  persistence:
    enabled: false
  mode: standalone
  rootUser: rootuser
  rootPassword: rootpass123
  buckets:
    - name: bucket1
      policy: none
      purge: false
  svcaccts:
    - user: rootuser
      accessKey: accessKey
      secretKey: secretKey

crdb:
  image: cockroachdb/cockroach:latest-v21.1

chaos-mesh:
  enabled: false

#https://github.com/chaos-mesh/chaos-mesh/tree/master/helm/chaos-mesh
controllerManager:
  leaderElection:
    enabled: false
dashboard:
  securityMode: false
chaosDaemon:
  runtime: containerd
  socketPath: /run/containerd/containerd.sock

fleetscheduler:
  enable: false # when enabled, metal-toolbox/fleet-scheduler will need to be deployed with `make push-image-devel`
  image:
    repository: "localhost:5001/fleet-scheduler"
    tag: latest
    imagePullPolicy: Always
  env:
    log_level: debug
    fleetdb:
      endpoint: http://fleetdb:8000
      disable_oauth: true
    conditionorc:
      endpoint: http://conditionorc-api:9001
      disable_oauth: true
  jobs: # technically, this is optional
    - name: inventory # This job will collect all servers and create conditions on them
      ttlSecondsAfterFinished: 86400 # Remove job after 1 day. (optional)
      startingDeadlineSeconds: 3600 # The job has 1 hour to run the task, if it cant after 1 hour, it wont run. (optional)
      restartPolicy: OnFailure
      schedule: "10 * * * *" # Run once per hour
      command:
      - /usr/sbin/fleet-scheduler
      - --config
      - /etc/fleet-scheduler/config.yaml
      - inventory
      - --page-size
      - "512"

# Enable the push gateway to collect metrics from fleetscheduler
#prometheus-pushgateway:
#  fullnameOverride: fleet-pushgateway
#  resources:
#    limits:
#      cpu: 300m
#      memory: 150Mi
#    requests:
#      cpu: 300m
#      memory: 150Mi
#  service:
#    port: 9090

flipflop:
  enable: true
  image:
    repository: "localhost:5001/flipflop"
    tag: latest
    pullPolicy: Always
  env:
    FLEETDB_ENDPOINT: http://fleetdb:8000
    FLEETDB_DISABLE_OAUTH: true
    NATS_URL: "nats://nats:4222"
    NATS_CONNECT_TIMEOUT: 60s
    # telemetry configuration
    OTEL_EXPORTER_OTLP_ENDPOINT: jaeger:4317
    OTEL_EXPORTER_OTLP_INSECURE: true


